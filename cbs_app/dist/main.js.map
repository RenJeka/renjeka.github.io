{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/tableWorker.js","webpack:///./src/myHelperLib.js","webpack:///./src/index.js","webpack:///./src/formHandler.js","webpack:///./src/books.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","tableWorker","fillTable","table","keyOrArrayOfObjects","length","this","addInfoInRow","addRow","rowIndex","arrayofData","getTableData","localStorage","getItem","jsonObject","window","JSON","parse","data","numberOfRows","numberOfCells","console","log","arrayofRows","add","context","row","document","createElement","appendChild","j","cell","push","undefined","rows","cells","indexOfRow","k","addInfoInCell","indexOfCell","toLowerCase","whatObjectKey","innerHTML","dataset","objectKeyBind","$","selector","querySelector","addEventListener","dir","e","returnedObject","formHandler","addBookHandler","addedObject","event","currentForm","target","form","formElements","elements","validate","currentObject","getObjectType","localStorageKey","objtype","Book","Author","fillObject","findDublicate","cleanInput","addToLocalStorage","getID","getAttribute","type","localName","className","id","localStorageArray","flag","some","item","alert","arrayOfElements","counterOfInvalid","tempData","tempJSON","firstArray","stringify","setItem","field","tableData","currentId","forEach","element","parseInt","bookLibrary"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,QAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gSC5E5BC,EAAdA,YAAc,CAUxBC,UAVwB,SAUdC,EAAOC,GAGhB,GAAkC,iBAAvBA,EAoBL,GAAiC,gBAA9B,IAAOA,EAAP,cAAOA,UAEf,IAAK,IAAInC,EAAI,EAAGA,EAAImC,EAAoBC,OAAQpC,IAC/CqC,KAAKC,aACJJ,EACAG,KAAKE,OAAOL,GAAOM,SACnBC,YAAYzC,QA1Bf,CAGC,IAA8C,IAA1CqC,KAAKK,aAAaP,GACrB,OAAO,EAKR,IAFA,IAAIM,EAAcJ,KAAKK,aAAaP,GAE3BnC,EAAI,EAAGA,EAAIyC,EAAYL,OAAQpC,IAEvCqC,KAAKC,aACJJ,EACAG,KAAKE,OAAOL,GAAOM,SACnBC,EAAYzC,MA0BhB0C,aArDwB,SAqDXnB,GAGZ,GAAIoB,aAAaC,QAAQrB,GAAM,CAC9B,IAAIsB,EAAaC,OAAOH,aAAaC,QAAQrB,GAE7C,OAAOwB,KAAKC,MAAMH,GAElB,OAAO,GAgBTN,OA7EwB,SA6EjBL,EAAOe,GAAuC,IAAjCC,EAAiC,uDAAlB,EAAGC,EAAe,aACpDC,QAAQC,IAAIhB,MAEZ,IAAIiB,EAAc,GAGlB,SAASC,EAAIC,GAEZ,IAAK,IAAIxD,EAAI,EAAGA,EAAIkD,EAAclD,IAAK,CAEtC,IAAIyD,EAAMC,SAASC,cAAc,MACjCzB,EAAM0B,YAAYH,GAGlB,IAAK,IAAII,EAAI,EAAGA,EAAIV,EAAeU,IAAK,CAEvC,IAAIC,EAAOJ,SAASC,cAAc,MAClCF,EAAIG,YAAYE,GAKjBR,EAAYS,KAAKN,GAEbR,GAEHO,EAAQlB,aAAaJ,EAAOuB,EAAIjB,SAAUS,GAG5C,OAAOK,EASR,GALqBU,MAAjBb,IACHA,EAAgBjB,EAAM+B,KAAK,GAAGC,MAAM9B,QAIjB,GAAhBc,EAAmB,CAEtB,IAAIO,EAAMF,EAAIlB,MACd,OAAOoB,EAAI,GAEZ,OAAOF,EAAIlB,OAWZC,aAnIwB,SAmIXJ,EAAOiC,EAAYzC,GAE/B,IAAK,IAAI0C,EAAI,EAAGA,EAAIlC,EAAM+B,KAAKE,GAAYD,MAAM9B,OAAQgC,IAExD/B,KAAKgC,cAAcnC,EAAOR,EAAQyC,EAAYC,IAahDC,cApJwB,SAoJVnC,EAAOR,EAAQyC,EAAYG,GAExC,IAAK,IAAM/C,KAAOG,EACbA,EAAOG,eAAeN,IAGrBA,EAAIgD,gBAAkBlC,KAAKmC,cAActC,EAAOoC,GAAaC,gBAEhErC,EAAM+B,KAAKE,GAAYD,MAAMI,GAAaG,UAAY/C,EAAOH,KAajEiD,cAzKwB,SAyKVtC,EAAOoC,GAIpB,OADsBpC,EAAM+B,KAAK,GAAGC,MAAMI,GAAaI,QAAQC,iB,gFC5KzDC,EAJR,SAAWC,GACV,OAAOnB,SAASoB,cAAcD,K,6BCK/B,WACA,OACA,OAEA/B,OAAOiC,iBAAiB,QAAQ,WAE/B,IAAI7C,GAAQ,IAAA0C,GAAE,gBAEdxB,QAAQ4B,IAAI9C,GACZF,cAAYC,UAAUC,EAAM,iBAG5B,IAAA0C,GAAE,QAAQG,iBAAiB,SAAS,SAASE,GAG5C,IAAIC,EAAkBC,cAAYC,eAAeH,GAGjD,GAAsB,GAAlBC,EACH,OAAO,EAIRlD,cAAYO,OAAOL,EAAOgD,EAAeG,gBAG1CT,Q,mGCjCD,SACA,OACA,OAGyBO,EAAdA,YAAc,CASxBC,eATwB,SASTE,GAEd,IAAIC,EAAcD,EAAME,OAAOC,KAC3BC,EAAeH,EAAYI,SAG/B,GAAmC,GAA/BtD,KAAKuD,SAASF,GACjB,OAAO,EAGR,IAAIG,EAAgBxD,KAAKyD,cAAcP,GACnC7D,SACAqE,EAAkBF,EAAcE,gBAGpC,OAAQF,EAAcG,SAErB,IAAK,OACJtE,EAAU,IAAIuE,OACd,MAED,IAAK,SACJvE,EAAU,IAAIwE,OAQhB,OAHA7D,KAAK8D,WAAWzE,EAAQgE,EAAcK,IAGlC1D,KAAK+D,cAAc1E,EAAQqE,KAK/B1D,KAAKgE,WAAWd,GAGhBlD,KAAKiE,kBAAkB5E,EAAQqE,GAExB,CAACA,gBAAiBA,EAAiBV,YAAa3D,KAYxDyE,WA7DwB,SA6DbzE,EAAQgE,EAAcK,GAIhCrE,EAAA,IAAoBW,KAAKkE,MAAMR,EADf,OAEhB,IAAK,IAAI/F,EAAI,EAAGA,EAAI0F,EAAatD,OAAQpC,IAGxC0B,EAAOgE,EAAa1F,GAAGwG,aAAa,OAASd,EAAa1F,GAAGiB,MAI9D,OAAOS,GAUR2E,WAnFwB,SAmFbZ,GAEV,IAAK,IAAIzF,EAAI,EAAGA,EAAIyF,EAAKE,SAASvD,OAAQpC,IAGV,UAAzByF,EAAKE,SAAS3F,GAAGyG,MAAkD,UAA9BhB,EAAKE,SAAS3F,GAAG0G,YAC3DjB,EAAKE,SAAS3F,GAAGiB,MAAQ,GACzBwE,EAAKE,SAAS3F,GAAG2G,UAAY,iBA+BhCb,cAzHwB,SAyHVL,GACb,IAAK,IAAIzF,EAAI,EAAGA,EAAIyF,EAAKE,SAASvD,OAAQpC,IACzC,GAA2B,WAAvByF,EAAKE,SAAS3F,GAAG4G,GACpB,MAAO,CAACZ,QAAQP,EAAKE,SAAS3F,GAAGiB,MAAQ8E,gBAAgBN,EAAKE,SAAS3F,GAAG0E,QAAQqB,iBAGpF,KAAM,iQASPK,cAxIwB,SAwIV1E,EAAQqE,GACrB,IAAIc,EAAoB7E,cAAYU,aAAaqD,GAEjD,GAAyB,GAArBc,EACH,OAAO,EAGR,IAAIC,EAAOD,EAAkBE,MAAK,SAAAC,GAAA,OAAOA,EAAKJ,IAAMlF,EAAOkF,MAI3D,OAHIE,GACHG,MAAO,yBAEDH,GASRlB,SA5JwB,SA4JfsB,GAIR,IAFA,IAAIC,EAAmB,EAEdnH,EAAI,EAAGA,EAAIkH,EAAgB9E,OAAQpC,IAGP,UAAhCkH,EAAgBlH,GAAG0G,YAIe,GAAnCQ,EAAgBlH,GAAGiB,MAAMmB,QAE3B8E,EAAgBlH,GAAG2G,UAAY,iBAC/BQ,KAGAD,EAAgBlH,GAAG2G,UAAY,gBAKjC,QAAIQ,EAAmB,IAcxBb,kBAhMwB,SAgMN5E,EAAQkF,GAEzB,IAAIQ,SACAC,EAAW1E,aAAaC,QAAQgE,GAChCU,EAAa,GAGjB,OAAID,IAEHD,EAAWrE,KAAKC,MAAMqE,IACbtD,KAAKrC,GACd2F,EAAWtE,KAAKwE,UAAUH,QAC1BzE,aAAa6E,QAAQZ,EAAGS,KAIxBC,EAAWvD,KAAKrC,QAChBoB,OAAOH,aAAa6E,QAAQZ,EAAI7D,KAAKwE,UAAUD,MAUjDf,MA3NwB,SA2NlBR,EAAiB0B,GAEtB,IAAIC,EAAY1F,cAAYU,aAAaqD,GACrC4B,EAAY,EAChB,OAAID,GAEHA,EAAUE,SAAQ,SAAAC,GAEbC,SAASD,EAAQJ,IAAWE,IAC/BA,EAAaG,SAASD,EAAQJ,QAGzBE,EAAY,GAEZ,K,gFCxMF1B,K,sHAAM8B,YApCI","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\r\n// Тут находятся все функции для работы с таблицами.\r\n// Добавлять строки, редактировать,удалять, заполнять таблицу\r\n\r\n/** @module tableWorker */\r\n\r\nexport let tableWorker = {\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * @todo Необходимо реализовать перегрузку функции, чтобы она принимала либо массив, либо строку-\"ключ\" LocalStorage  (Подробнее — https://habr.com/ru/post/86403/)\r\n\t * @description  Метод заполняет указанную таблицу, взяв данные с LocalStorage по ключу, либо указанным массивом объектов.\r\n\t * @param {Object} table Таблица, кототую необходимо заполнить\r\n\t * @param {Array} keyOrArrayOfObjects Ключ либо массив с данными (с объектами)\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\tfillTable(table, keyOrArrayOfObjects) {\r\n\r\n\t\t// Если в параметре (№2) указан ключ — метод достает значения из LocalStorage и заполняет таблицу.\r\n\t\tif (typeof keyOrArrayOfObjects == \"string\") {\r\n\t\t\t\r\n\t\t\t// Проверка на незаполненную таблицу\r\n\t\t\tif (this.getTableData(keyOrArrayOfObjects) ===false) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet arrayofData = this.getTableData(keyOrArrayOfObjects);\r\n\r\n\t\t\tfor (let i = 0; i < arrayofData.length; i++) {\r\n\r\n\t\t\t\tthis.addInfoInRow(\r\n\t\t\t\t\ttable, \r\n\t\t\t\t\tthis.addRow(table).rowIndex, \r\n\t\t\t\t\tarrayofData[i]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\t// Если в параметре (№2) указан объект с данными — метод заполняет таблицу этим объектом.\r\n\t\t}else if(typeof keyOrArrayOfObjects == \"object\"){\r\n\r\n\t\t\tfor (let i = 0; i < keyOrArrayOfObjects.length; i++) {\r\n\t\t\t\tthis.addInfoInRow(\r\n\t\t\t\t\ttable, \r\n\t\t\t\t\tthis.addRow(table).rowIndex, \r\n\t\t\t\t\tarrayofData[i]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод позволяет получить данные с LocalStorage для заполнения таблицы.  \r\n\t * @param {String} key ключ от объекта в LocalStorage\r\n\t * @return {Object} Возвращает распарсенный массив объектов, которым можно заполнить таблицу (jsonObject)\r\n\t */\r\n\tgetTableData(key){\r\n\r\n\t\t// Если есть JSON-данные по переданному ключу (аргумент \"key\" в LocalStorage) — тогда возвращаем подготовленные данные, если JSON не найден — возвращаем false.\r\n\t\tif (localStorage.getItem(key)) {\r\n\t\t\tlet jsonObject = window.localStorage.getItem(key);\r\n\r\n\t\t\treturn JSON.parse(jsonObject)\r\n\t\t}else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод, который добавляет ряды с ячейками в таблицу\r\n\t * @todo Реализовать эту функцию так, чтобы не получалось замыкание. (Чтобы не использовалась внутреняя функция)\r\n\t * @param {Object} table Таблица, в которую необходимо добавить ряд(ы)\t \r\n\t * @param {Object} data Данные, которые необходимо добавить в ряд(ы)\r\n\t * @param {Number} numberOfRows Кол-во рядов (по умолчанию = 1)\r\n\t * @param {Number} numberOfCells Кол-во ячеек в ряде (По умолчанию высчитывается по кол-ву ячеек в заголовке (thead))\r\n\t * @return {arrayofRows} Возвращает созданный массив строк (либо 1 строку) с данными.\r\n\t */\r\n\r\n\taddRow(table, data, numberOfRows = 1, numberOfCells) {\r\n\t\tconsole.log(this);\r\n\r\n\t\tlet arrayofRows = [];\r\n\r\n\t\t// Эта функция собственно и добавляет ряд, ячейки и текст в таблицу. Принимает контекст, и возвращает массив с созданными строками\r\n\t\tfunction add(context) {\r\n\t\t\t// Цикл добавляеи по 1-й строке то кол-во, которое мы укажем (numberOfRows)\r\n\t\t\tfor (let i = 0; i < numberOfRows; i++) {\r\n\r\n\t\t\t\tlet row = document.createElement(\"tr\")\r\n\t\t\t\ttable.appendChild(row)\r\n\r\n\t\t\t\t// Цикл добавляет по 1-й ячейке то кол-во, которое мы укажем (numberOfCells)\r\n\t\t\t\tfor (let j = 0; j < numberOfCells; j++) {\r\n\r\n\t\t\t\t\tlet cell = document.createElement(\"td\")\r\n\t\t\t\t\trow.appendChild(cell)\r\n\r\n\t\t\t\t\t// Добавляем текст в ячейку переданным параметром\r\n\t\t\t\t\t// cell.innerHTML = textInCell;\r\n\t\t\t\t}\r\n\t\t\t\tarrayofRows.push(row);\r\n\r\n\t\t\t\tif (data) {\r\n\r\n\t\t\t\t\tcontext.addInfoInRow(table, row.rowIndex, data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn arrayofRows;\r\n\t\t}\r\n\r\n\t\t// Проверка на наличие аргумента \"numberOfCells\", если его нет— за количестко ячеек считается количество ячеек в самом первом ряду (в \"thead\");\r\n\t\tif (numberOfCells == undefined) {\r\n\t\t\tnumberOfCells = table.rows[0].cells.length;\r\n\t\t}\r\n\r\n\t\t// Этот способ будет использоваться чаще всего и возвращать 1 созданный ряд с данными.\r\n\t\tif (numberOfRows == 1) {\r\n\r\n\t\t\tlet row = add(this)\r\n\t\t\treturn row[0];\r\n\t\t}\r\n\t\treturn add(this);\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Это основной метод, который заполняет целый ряд таблицы. Использует метод \"addInfoInCell\", который заполняет каждую ячейку\r\n\t * @param {Object} table Таблица, в которой будет заполнятся ряд\r\n\t * @param {Number} indexOfRow Индекс ряда в таблице, который будет заполнятся данными \r\n\t * @param {Object} object Объект с данными для заполнения ряда. \r\n\t * @return {void} Ничего не возвращает\r\n\t*/\r\n\taddInfoInRow(table, indexOfRow, object) {\r\n\r\n\t\tfor (let k = 0; k < table.rows[indexOfRow].cells.length; k++) {\r\n\r\n\t\t\tthis.addInfoInCell(table, object, indexOfRow, k)\r\n\t\t}\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод заполняет одну указанную ячейку в указанном ряде таблицы.Метод переберает объект на подходящее свойство и помещает значение этого свойства в ячейку таблицы. Нужен для работы метода addInfoInRow\r\n\t * @param {Object} table Таблица, в которой будет заполнятся ячейка\r\n\t * @param {Object} object Объект с данными для заполнения ячейки.\r\n\t * @param {Number} indexOfRow Индекс ряда, в котором находится нужная для заполнения ячейка\r\n\t * @param {Number} indexOfCell Индекс ячейки, которая будет заполнятся.\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\taddInfoInCell(table, object, indexOfRow, indexOfCell ) {\r\n\r\n\t\tfor (const key in object) {\r\n\t\t\tif (object.hasOwnProperty(key)) {\r\n\r\n\t\t\t\t// Если ключ объекта равняется тому, что вернул метот \"whatHead\" — значение из объекта заполняется в заранее заданную ячейку\r\n\t\t\t\tif (key.toLowerCase() === this.whatObjectKey(table, indexOfCell).toLowerCase()){\r\n\r\n\t\t\t\t\ttable.rows[indexOfRow].cells[indexOfCell].innerHTML = object[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t// -----------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод вычисляет, какой заголовок находиться над указанной ячейкой (Заголовок колонки). Нужен для работы метода \"addInfoInCell\"\r\n\t * @param {Object} table Таблица, в которой необходимо вычислить заголовок для указанной ячейки\r\n\t * @param {Number} indexOfCell Индекс ячейки\r\n\t * @return {String}  Возвращает название заголовка над ячейкой.\r\n\t * @see addInfoInCell\r\n\t */\r\n\twhatObjectKey(table, indexOfCell) {\r\n\r\n\t\t// Получаем значение из атрибута \"data-object-key-bind\" в заголовочной ячейки\r\n\t\tlet nameOfTableHead = table.rows[0].cells[indexOfCell].dataset.objectKeyBind;\r\n\t\treturn nameOfTableHead;\r\n\t},\r\n}\r\n\r\n","//  Моя вспомогательная библиотека. Тут находятся функции-помощники, чтобы не подключать JQuery.\r\n\r\nfunction $(selector) {\r\n\treturn document.querySelector(selector);\r\n}\r\n\r\nexport {$  };","\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\t\r\n\t// ♦ Продумать, как будет реализовываться проверка на валидность.  \r\n\t// ♦ реализовать перебор с помощью кнопок (данные выводятся в форму). \r\n\r\n\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\r\n\r\nimport { tableWorker } from './tableWorker';\r\nimport {$} from './myHelperLib'\r\nimport { formHandler } from './formHandler';\r\n\r\nwindow.addEventListener(\"load\", () =>{\r\n\r\n\tlet table = $('#table-books');\r\n\r\n\tconsole.dir(table);\r\n\ttableWorker.fillTable(table,\"Book-Library\");\r\n\t\r\n\t\r\n\t$('#add').addEventListener(\"click\", function(e) {\r\n\t\t\r\n\t\t// Запускаем обработчик события на клик по кнопке \"add\" и получаем возращаемый объект, который записался в базу данных.\r\n\t\tlet returnedObject =  formHandler.addBookHandler(e);\r\n\r\n\t\t// Если есть ошибка в валидации — возвращаем \"false\", и клик не дает результата (не записывает данные и не модифицирует таблицу )\r\n\t\tif (returnedObject == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Добавляем ряд с данными в таблицу\r\n\t\ttableWorker.addRow(table, returnedObject.addedObject);\r\n\t})\r\n\r\n\t$\r\n});\r\n\r\n\r\n","// Эта библиотека отвечает за обработку данных с форм\r\nimport {$} from './myHelperLib';\r\nimport { Book, bookLibrary } from './books';\r\nimport {tableWorker} from './tableWorker';\r\n\r\n\r\nexport let formHandler = {\r\n\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Обработчик событий при нажатии на кнопку \"addBook\". Берет с формы данные и записывает в LocalStorage.\r\n\t * @param {object} event Объект события\r\n\t * @return {object}  Возвращает объект с ключом от данных в LocalStorage и добавленным объектом.{localStorageKey: localStorageKey, addedObject: book}. Возвращает \"false\", если форма не валидная либо есть такая-же запись в LocalStorage.\r\n\t */\r\n\taddBookHandler(event) {\r\n\r\n\t\tlet currentForm = event.target.form;\r\n\t\tlet formElements = currentForm.elements;\r\n\r\n\t\t// Проверка валидации. Если валидация вернула \"false\" — то закончить выполнение текущего метода\r\n\t\tif (this.validate(formElements) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet currentObject = this.getObjectType(currentForm); \r\n\t\tlet object;\r\n\t\tlet localStorageKey = currentObject.localStorageKey; // Ключ, по которому записываются значения в LocalStorage\r\n\r\n\r\n\t\tswitch (currentObject.objtype) {\r\n\r\n\t\t\tcase \"book\":\r\n\t\t\t\tobject =  new Book;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"author\":\r\n\t\t\t\tobject =  new Author;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tthis.fillObject(object, formElements, localStorageKey);\r\n\r\n\t\t//Если находим дубликат объекта - метод заканчивает работу.\r\n\t\tif (this.findDublicate(object, localStorageKey)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t//Чистим все поля для заполнения\r\n\t\tthis.cleanInput(currentForm);\r\n\t\t\r\n\t\t// Добавляем настроенный объект в \"localStorage\"\r\n\t\tthis.addToLocalStorage(object, localStorageKey);\r\n\r\n\t\treturn {localStorageKey: localStorageKey, addedObject: object};\r\n\t},\r\n\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод для заполнения объекта значениями с полей ввода в форме (input)\r\n\t * @todo реализовать заполнение объекта через конструктор класса Book в book.js\r\n\t * @param {object} object Пустой объект, который необходимо заполнить\r\n\t * @param {formElements[]} formElements Массив элементов, с которых берется значения\r\n\t * @param {string} localStorageKey Ключ от локального хранилища (для нахождения ID)\r\n\t * @return {object} Возвращает заполненный объект\r\n\t */\r\n\tfillObject(object, formElements, localStorageKey){\r\n\r\n\t\t// Добавляем новый \"id\"\r\n\t\tlet currentId = \"idd\"\r\n\t\tobject[currentId] = this.getID(localStorageKey, currentId);\r\n\t\tfor (let i = 0; i < formElements.length; i++) {\r\n\r\n\t\t\t// Создаем свойство у объекта с таким же именем, как и значение \"id\" в input\r\n\t\t\tobject[formElements[i].getAttribute(\"id\")] = formElements[i].value;\r\n\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод очищает поля в указанной форме.\r\n\t * @todo Передлелать этот метод через цикл \"forEach\" или \"for in \"\r\n\t * @param {object} form форма, поля в которой необходимо очистить\r\n\t * @return Ничего не возвращает\r\n\t */\r\n\r\n\tcleanInput(form){\r\n\r\n\t\tfor (let i = 0; i < form.elements.length; i++) {\r\n\r\n\t\t\t// Если поле скрытое, или элемент формы — кнопка, то пропускаем и не очищаем эти элементы\r\n\t\t\tif (!(form.elements[i].type == \"hidden\" || form.elements[i].localName == \"button\" )) {\r\n\t\t\t\tform.elements[i].value = \"\";\r\n\t\t\t\tform.elements[i].className = \"inputs-clean\" ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Вариант1\r\n\t\t// for (const key in form.elements) {\r\n\t\t// \tif (form.elements.hasOwnProperty(key)) {\r\n\t\t// \t\tif (key.type != \"hidden\" || key.localName != \"button\") {\r\n\t\t// \t\t\tkey.value = \"\";\r\n\t\t// \t\t\tkey.className = \"inputs-clean\" \r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Вариант2\r\n\t\t// form.elements.forEach(element => {\r\n\t\t// \tif (element.type != \"hidden\" || element.localName != \"button\") {\r\n\t\t// \t\telement.value = \"\";\r\n\t\t// \t\telement.className = \"inputs-clean\" \r\n\t\t// \t}\r\n\t\t// });\r\n\r\n\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод устанавливает, какой объект должен заполнятся в форме. Для работы метода в форме должно быть поле <input type='hidden' id='objtype' value=''>, иначе метод выбросит исключение.\r\n\t * @param {object} form форма, которая предназначена для ввода данных об объекте.\r\n\t * @return {object} Возвращает объект, c 2-мя свойствами: названием объекта и ключ для localStorage.\r\n\t */\r\n\tgetObjectType(form){\r\n\t\tfor (let i = 0; i < form.elements.length; i++) {\r\n\t\t\tif (form.elements[i].id == \"objtype\") {\r\n\t\t\t\treturn {objtype:form.elements[i].value , localStorageKey:form.elements[i].dataset.localStorageKey }   //form.elements[i].value\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow \"Не найдено поле ввода  <input type='hidden'> с указанием типа объекта, который будет передан в базу данный. Добавьте в вашу форму поле <input type='hidden' id='objtype' value=''>  В поле value='' укажите тип объекта, который будет добавлен в базу данных\"\r\n\t},\r\n\r\n\t/**\r\n\t * Метод проверяет дубликаты объектов. В случае нахождения дубликата выводит ошибку.\r\n\t * @param {object} object \r\n\t * @param {string} localStorageKey \r\n\t * @return {boolean} true, если метод нашел повторную запись, false — если не нашел.\r\n\t */\r\n\tfindDublicate(object, localStorageKey){\r\n\t\tlet localStorageArray = tableWorker.getTableData(localStorageKey);\r\n\r\n\t\tif (localStorageArray == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Тут производится сравнение по полю \"id\". Если есть совпадение — считается, что найден дубликат и метод выводит сообщение.\r\n\t\tlet flag = localStorageArray.some(item =>item.id == object.id);\r\n\t\tif (flag) {\r\n\t\t\talert (\"такая запись уже есть\");\r\n\t\t}\r\n\t\treturn flag;\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод проверяет чтобы все необходимые поля были заполнены (минимум 1 символом). \r\n\t * \r\n\t * @param {arrayOfElements[]} arrayOfElements Массив с DOM-элементами,  полями ввода (input) формы \r\n\t * @return {boolean} \"true\", если все поля валидные. \"false\", если хотя-бы 1 поле не прошло проверку (тогда и форма считается не валидной)\r\n\t */\r\n\tvalidate(arrayOfElements) {\r\n\t\t\r\n\t\tlet counterOfInvalid = 0;\r\n\r\n\t\tfor (let i = 0; i < arrayOfElements.length; i++) {\r\n\r\n\t\t\t//Этим \"if\" обрабатывается исключение (те элементы формы, которые не нужно валидировать)\r\n\t\t\tif (arrayOfElements[i].localName == \"button\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Сама проверка. Если в инпут не ввели данные— тогда применяется стиль (invalid) и обработчик завершает работу.\r\n\t\t\tif(arrayOfElements[i].value.length == 0){\r\n\r\n\t\t\t\tarrayOfElements[i].className = \"inputs-invalid\";\r\n\t\t\t\tcounterOfInvalid++;\r\n\t\t\t}else{\r\n\t\t\t\t\r\n\t\t\t\tarrayOfElements[i].className = \"inputs-valid\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Если счетчик невалидных элементов больше нуля — то и сама форма невалидная (вернуть \"false\")\r\n\t\tif (counterOfInvalid > 0) {\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t},\r\n\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод  добавляет переданный ей объект в локальное хранилище (Local Storage).\r\n\t * @param {object} object Объект, который нужно записать в LocalStorage\r\n\t * @param {string} id Ключ, по которому будет записываться объект\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\taddToLocalStorage(object, id) {\r\n\r\n\t\tlet tempData;\r\n\t\tlet tempJSON = localStorage.getItem(id);\r\n\t\tlet firstArray = [];\r\n\r\n\t\t// Если у нас уже есть такой JSON-объект — функция добавляет наш объект (который мы передали в параметре) — в готовый массив объектов. Если еще нет JSON-объекта — создаем новый.\r\n\t\tif (tempJSON) {\r\n\t\t\t\r\n\t\t\ttempData = JSON.parse(tempJSON);\r\n\t\t\ttempData.push(object);\r\n\t\t\ttempJSON = JSON.stringify(tempData);\r\n\t\t\tlocalStorage.setItem(id,tempJSON);\r\n\t\t\treturn;\r\n\r\n\t\t}else{\r\n\t\t\tfirstArray.push(object);\r\n\t\t\twindow.localStorage.setItem(id, JSON.stringify(firstArray));\r\n\t\t\treturn;\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t *  Функция формирует уникальный  id  для нового объекта.\r\n\t * @param {string} localStorageKey ключ от локального хранилища.\r\n\t * @param {string} field поле у объекта, по которому считается уникальное значение. (Сейчас подразумевается, что поле типа {number})\r\n\t * @return {number} Возращает новое значение \"id\", которого еще не было (самое большое текущее \"id\" +1)\r\n\t */\r\n\tgetID(localStorageKey, field) {\r\n\r\n\t\tlet tableData = tableWorker.getTableData(localStorageKey);\r\n\t\tlet currentId = 0;\r\n\t\tif (tableData) {\r\n\t\t\t// ищем самое большое значение \"id\"\r\n\t\t\ttableData.forEach(element => {\r\n\t\t\t\t\r\n\t\t\t\tif( parseInt(element[field])  > currentId){\r\n\t\t\t\t\tcurrentId  = parseInt(element[field])\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn currentId + 1;\r\n\t\t}else{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n// --------------------------------------------------------------------------\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n\t// // TODO — Реализовать уникальный ID\r\n\t// // // Функция формирует специфический ID для записи в \"Local Storage\". Используется функцией \"addToLocalStorage\"\r\n\r\n\t\r\n","\r\n\r\n// Массив, в котором будут храниться все объекты книг. Этот массив будет помещатся в Local Storage как объект JSON.\r\nlet bookLibrary = [];\r\n\r\n\r\n/**\r\n * Класс для создания объектов \"Книги\". Каждая книга — объект, свойства которого пользователь заполняет в полях \"input\" в форме \"Добавить книгу\"\r\n * @todo реализовать заполнение объекта с помощью конструктора. (В данный момент объект заполняется formHandler.addBookHandler())\r\n * @constructor создает свойства в объекте в соответствии с полям\r\n */\r\nclass Book{\r\n\r\n\r\n\t// Конструктор не применялся. Новый объект \"book\" заполняется с помощью цикла\r\n/* \tconstructor(id, name, author){\r\n\t\tthis.id = id;\r\n\t\tthis.name = name;\r\n\t\tthis.author = author;\r\n\r\n\t} */\r\n\r\n\t// constructor(array){\r\n\r\n\t// \tfor (let i = 0; i < array.length; i++) {\r\n\t\t\t\r\n\t// \t}\r\n\t// \t// array.forEach(element => {\r\n\t// \t// \telement.id = id;\r\n\t// \t// \telement.name = name;\r\n\t// \t// \telement.author = author;\r\n\t// \t// });\r\n\t// }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport {Book, bookLibrary};"],"sourceRoot":""}