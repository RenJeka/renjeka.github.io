{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/books.js","webpack:///./src/formHandler.js","webpack:///./src/index.js","webpack:///./src/myHelperLib.js","webpack:///./src/tableWorker.js"],"names":["bookLibrary","Book","id","name","author","invalidStylist","arrayOfInputs","i","length","className","addToLocalStorage","object","jsonObject","JSON","stringify","window","localStorage","setItem","addBookHandler","table","newRow","book","document","querySelectorAll","localStorageKey","console","dir","value","getAttribute","type","push","tableWorker","addRow","addInfoInRow","rowIndex","addEventListener","myTable1","fillTable","$","selector","querySelector","numberOfRows","numberOfCells","textInCell","arrayofRows","add","row","createElement","appendChild","j","cell","innerHTML","undefined","rows","cells","addInfoInCell","indexOfRow","indexOfCell","key","hasOwnProperty","toLowerCase","whatHead","nameOfTableHead","k","keyOrArrayOfObjects","arrayofData","getTableData","arrayOfObjects","getItem","parse"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","\r\n\r\n// Массив, в котором будут храниться все объекты книг. Этот массив будет помещатся в Local Storage как объект JSON.\r\nlet bookLibrary = [];\r\n\r\nclass Book{\r\n\r\n\t// Конструктор не применялся. Новый объект \"book\" заполняется с помощью цикла\r\n\tconstructor(id, name, author){\r\n\t\tthis.id = id;\r\n\t\tthis.name = name;\r\n\t\tthis.author = author;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport {Book, bookLibrary};","// Эта библиотека отвечает за обработку данных с форм\r\nimport { tableWorker } from './tableWorker';\r\nimport {$} from './myHelperLib';\r\nimport { Book, bookLibrary } from './books';\r\n\r\n\r\n// Функция для стилизации инпутов в стиль \"invalid\". Мы передаем на вход массив с инпутами, и функция их стилизует.\r\nfunction invalidStylist(arrayOfInputs) {\r\n\r\n\tfor (let i = 0; i < arrayOfInputs.length; i++) {\r\n\t\tarrayOfInputs[i].className = \"bookInputs-invalid\";\r\n\t} \r\n\t\r\n}\r\n\r\n// Функция добавляет переданный ей объект в локальное хранилище (Local Storage). Функция преображает объект в JSON-объект и создает ключ\r\nfunction addToLocalStorage(object, id) {\r\n\r\n\tlet jsonObject = JSON.stringify(object);\r\n\r\n\twindow.localStorage.setItem(id, jsonObject);\r\n}\r\n\r\n// // Функция формирует специфический ID для записи в \"Local Storage\". Используется функцией \"addToLocalStorage\"\r\n// function getID(object) {\r\n\r\n// \treturn object.objtype + \"-\" + object.id;\r\n\t\r\n// }\r\n\r\n// Обработчик событий при нажатии на кнопку \"addBook\". Берет с формы данные и записывает в LocalStorage. Возвращает ключ от данных в LocalStorage.\r\nfunction addBookHandler(table) {\r\n\t\tlet newRow;\r\n\t\tlet book = new Book;\r\n\t\tlet arrayOfInputs = document.querySelectorAll('#form-book input');\r\n\t\tlet localStorageKey = \"Book-Library\"; // Ключ, по которому записываются значения в LocalStorage\r\n\t\tconsole.dir(arrayOfInputs);\r\n\r\n\t\t// Проверка, чтобы все необходимые поля были заполнены (минимум 1 символом). Эта проверка (этот цикл) должен запускаться первой!\r\n\t\tfor (let i = 0; i < arrayOfInputs.length; i++) {\r\n\r\n\t\t\t// Сама проверка. Если длина \"value\" хоть одного (первого попавшивося) у инпута == 0 — тогда применяется стиль (invalid) и обработчик завершает работу.\r\n\t\t\tif(arrayOfInputs[i].value.length == 0){\r\n\r\n\t\t\t\tinvalidStylist(arrayOfInputs);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Этот цикл заполняет объект \"book\". Он перебирает все поля для ввода (инпуты), и создает такие-же свойства у объекта book (название свойста соответствует ID инпута)\r\n\t\tfor (let i = 0; i < arrayOfInputs.length; i++) {\r\n\r\n\t\t\tbook[arrayOfInputs[i].getAttribute(\"id\")] = arrayOfInputs[i].value;\r\n\r\n\t\t\t// Очищение полей. Тут идет проверка на то, чтобы поле не было типа \"hidden\", так как это системное поле и его нельзя очищать. \r\n\t\t\tif (arrayOfInputs[i].type != \"hidden\") {\r\n\r\n\t\t\t\tarrayOfInputs[i].value = \"\";\r\n\t\t\t\tarrayOfInputs[i].className = \"bookInputs-valid\" \r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tbookLibrary.push(book);\r\n\t\tconsole.dir( bookLibrary);\r\n\r\n\t\tconsole.dir(book);\r\n\r\n\t\taddToLocalStorage(bookLibrary, localStorageKey);\r\n\r\n\t\t//  В конце работы обработчика мы создаем новую строку с помощью импортированного объекта \"tableWorker\", и добавляем информацию с настроенного ранее объекта \"book\"\r\n\t\tnewRow = tableWorker.addRow(table);\r\n\t\ttableWorker.addInfoInRow(table,newRow.rowIndex,book);\r\n\t\treturn localStorageKey;\r\n}\r\n\r\n\r\nexport {invalidStylist, addToLocalStorage, addBookHandler};","import { tableWorker } from './tableWorker';\r\nimport {$} from './myHelperLib'\r\nimport { Book } from './books';\r\nimport { invalidStylist, addToLocalStorage, addBookHandler } from './formHandler';\r\n\r\nwindow.addEventListener(\"load\", () =>{\r\n\r\n\tlet myTable1 = $('.myTable1');\r\n\r\n\ttableWorker.fillTable(myTable1, \"Book-Library\");\r\n\t\r\n\t// console.dir(myTable1);\r\n\t// console.log(myTable1.rows);\r\n\t// console.log(tableWorker.addRow(myTable1,3,3, \"any\"));\r\n\r\n\t// TODO [Спросить] -Как лучше поместить данный обработчик в отдельный модуль, чтобы он работал корректно.\r\n\r\n\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\t\r\n\t// ♦ Продумать, как будет реализовываться проверка на валидность.  \r\n\t// ♦ Поместить все объекты \"book\" в массив и реализовать их перебор с помощью кнопок (данные выводятся в форму). \r\n\t// ♦ Добавить функцию - парсинг объекта с \"Local Storage\" (объекты записываются в массив arrayOfBooks)\r\n\t// ♦ Реализовать заполнение таблицы напрямую с массива \"arrayOfBooks\"\r\n\t// ♦ Реализовать автоматическое заполнение ID f объекте\r\n\r\n\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\r\n \t// Обработчик события на клик по кнопке \"addBook\"\r\n\t$('#addBook').addEventListener(\"click\", () => {\r\n\t\r\n\t\ttableWorker.fillTable(myTable1,addBookHandler(myTable1));\r\n\t\t\r\n\t})\r\n\r\n})","//  Моя вспомогательная библиотека. Тут находятся функции-помощники, чтобы не подключать JQuery.\r\n\r\nfunction $(selector) {\r\n\treturn document.querySelector(selector);\r\n}\r\n\r\nexport {$  };","\r\n// Тут находятся все функции для работы с таблицами.\r\n// Добавлять строки, редактировать, ...\r\n\r\nexport let tableWorker = {\r\n\t// -----------------------------------------------------------------------------------\r\n\t// Метод, который добавляет ряды с ячейками в таблицу\r\n\taddRow(table, numberOfRows = 1, numberOfCells, textInCell = \"\") {\r\n\t\t\r\n\t\tlet arrayofRows = [];\r\n\r\n\t\t// Эта функция собственно и добавляет ряд, ячейки и текст в таблицу\r\n\t\t// (Не знаю, как сделать этот метод без внутренней функции)\r\n\t\tfunction add() {\r\n\t\t\t// Цикл добавляеи по 1-й строке то кол-во, которое мы укажем (numberOfRows)\r\n\t\t\tfor (let i = 0; i < numberOfRows; i++) {\r\n\t\t\t\tlet row = document.createElement(\"tr\")\r\n\t\t\t\ttable.appendChild(row)\r\n\r\n\t\t\t\t// Цикл добавляет по 1-й ячейке то кол-во, которое мы укажем (numberOfCells)\r\n\t\t\t\tfor (let j = 0; j < numberOfCells; j++) {\r\n\t\t\t\t\tlet cell = document.createElement(\"td\")\r\n\t\t\t\t\trow.appendChild(cell)\r\n\r\n\t\t\t\t\t// Добавляем текст в ячейку переданным параметром\r\n\t\t\t\t\tcell.innerHTML = textInCell;\r\n\t\t\t\t}\r\n\t\t\t\tarrayofRows.push(row);\r\n\t\t\t}\r\n\t\t\treturn arrayofRows;\r\n\t\t}\r\n\r\n\t\t// Проверка на наличие аргумента \"numberOfCells\", если его нет— за количестко ячеек считается количество ячеек в самом первом ряду (в \"thead\");\r\n\t\tif (numberOfCells == undefined) {\r\n\t\t\tnumberOfCells = table.rows[0].cells.length;\r\n\t\t}\r\n\r\n\t\t// Если ряд не указан (ряд по умолчанию = 1 ) — метод возвращает объект — созданный ряд \r\n\t\t// Этот способ будет использоваться чаще всего (для создания только 1-го ряда)\r\n\t\tif (numberOfRows == 1) {\r\n\r\n\t\t\tlet row = add()\r\n\t\t\treturn row[0];\r\n\t\t}\r\n\t\t\r\n\t\t// Метод возвращает массив с созданными рядами (массив созданных рядов)\r\n\t\treturn add();\r\n\t},\r\n\t// -----------------------------------------------------------------------------------\r\n\t// Метод заполняет одну указанную ячейку в указанном ряде таблицы. Данные берутся с переданного объекта. Функция переберает объект на подходящее свойство и помещает значение этого свойства в ячейку таблицы. Нужна для функции addInfoInRow\r\n\taddInfoInCell(table, object, indexOfRow, indexOfCell ) {\r\n\r\n\t\tfor (const key in object) {\r\n\t\t\tif (object.hasOwnProperty(key)) {\r\n\t\t\t\tif (key.toLowerCase() === this.whatHead(table, indexOfCell).toLowerCase()){\r\n\t\t\t\t\ttable.rows[indexOfRow].cells[indexOfCell].innerHTML = object[key];\r\n\t\t\t\t\tconsole.dir(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t// -----------------------------------------------------------------------------------\r\n\t// Метод вычисляет, какой заголовок находиться над указанной ячейкой (Заголовок колонки). Нужна для функции \"addInfoInCell\"\r\n\twhatHead(table, indexOfCell) {\r\n\r\n\t\tlet nameOfTableHead = table.rows[0].cells[indexOfCell].innerHTML;\r\n\t\treturn nameOfTableHead;\r\n\t},\r\n\t// -----------------------------------------------------------------------------------\r\n\t// Это основной метод, который заполняет целый ряд таблицы. Использует метод \"addInfoInCell\".\r\n\taddInfoInRow(table, indexOfRow, object) {\r\n\r\n\t\tfor (let k = 0; k < table.rows[indexOfRow].cells.length; k++) {\r\n\r\n\t\t\tthis.addInfoInCell(table, object, indexOfRow, k)\r\n\t\t}\r\n\t},\r\n\t// -----------------------------------------------------------------------------------\r\n\r\n\t// Метод заполняет указанную таблицу, указанным массивом объектов. Получает на вход таблицу и массив с данными, либо ключ (по которому лежит массив с данными в LocalStorage).\r\n\t// TODO • Необходимо реализовать перегрузку функции, чтобы она принимала либо массив, либо строку-\"ключ\" LocalStorage  (Подробнее — https://habr.com/ru/post/86403/)\r\n\tfillTable(table, keyOrArrayOfObjects) {\r\n\r\n\t\tif (typeof keyOrArrayOfObjects == \"string\") {\r\n\t\t\t\r\n\t\t\tlet arrayofData = this.getTableData(keyOrArrayOfObjects);\r\n\r\n\t\t\tfor (let i = 0; i < arrayofData.length; i++) {\r\n\t\t\t\tthis.addInfoInRow(table, i, arrayofData[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}else if(typeof keyOrArrayOfObjects == \"object\"){\r\n\r\n\t\t\tfor (let i = 0; i < arrayOfObjects.length; i++) {\r\n\t\t\t\tthis.addInfoInRow(table, i, arrayOfObjects[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t// Метод получает данные с LocalStorage для заполнения таблицы. Нужно передать ключ от объекта в LocalStorage. Возвращает распарсенный массив объектов, которым можно заполнить таблицу.\r\n\tgetTableData(key){\r\n\r\n\t\tlet jsonObject = window.localStorage.getItem(key);\r\n\r\n\t\treturn JSON.parse(jsonObject)\r\n\t}\r\n\r\n\r\n}\r\n\r\n"],"sourceRoot":""}