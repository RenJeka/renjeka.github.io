{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/books.class.js","webpack:///./src/formHandler.js","webpack:///./src/genres.class.js","webpack:///./src/index.js","webpack:///./src/myHelperLib.js","webpack:///./src/tableWorker.js"],"names":["bookLibrary","Book","formHandler","addBookHandler","event","currentForm","target","form","formElements","elements","dublicateKey","localStorageKey","getLocalStorageKey","validate","currentObject","getObjectType","object","objtype","Author","Genre","fillObject","findDublicate","cleanInput","addToLocalStorage","addedObject","currentId","getID","i","length","hasAttribute","getAttribute","value","type","localName","className","id","localStorageArray","tableWorker","getTableData","flag","some","item","alert","arrayOfElements","counterOfInvalid","tempData","tempJSON","localStorage","getItem","firstArray","JSON","parse","push","stringify","setItem","window","field","tableData","forEach","parseInt","element","document","forms","addEventListener","console","dir","currentTable","fillTable","e","returnedObject","addRow","rows","rowIndex","cleanTable","dataset","objectKeyBind","log","$","selector","querySelector","tag","tagName","getElementsByTagName","table","keyOrArrayOfObjects","sortMark","arrayofData","addInfoInRow","key","compare","a","b","jsonObject","hasOwnProperty","sort","undefined","data","numberOfRows","numberOfCells","arrayofRows","add","context","row","createElement","appendChild","j","cell","cells","indexOfRow","k","addInfoInCell","indexOfCell","toLowerCase","whatObjectKey","innerHTML","nameOfTableHead","deleteRow"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;AChFA;AACA,IAAIA,cAAc,EAAlB;;AAGA;;;;;IAIMC,I;;;;QA4BEA,I,GAAAA,I;QAAMD,W,GAAAA,W;;;;;;;;;;;;;;;;;;;ACrCd;;AACA;;AACA;;AAEA;;AAGO,IAAIE,oCAAc;;AAGxB;AACA;;;;;AAKAC,eATwB,0BASTC,KATS,EASF;;AAErB,MAAIC,cAAcD,MAAME,MAAN,CAAaC,IAA/B;AACA,MAAIC,eAAeH,YAAYI,QAA/B;AACA,MAAIC,eAAe,KAAnB,CAJqB,CAII;AACzB,MAAIC,kBAAkB,KAAKC,kBAAL,CAAwBP,WAAxB,CAAtB,CALqB,CAKuC;;AAE5D;AACA,MAAI,KAAKQ,QAAL,CAAcL,YAAd,KAA+B,KAAnC,EAA0C;AACzC,UAAO,KAAP;AACA;;AAED,MAAIM,gBAAgB,KAAKC,aAAL,CAAmBV,WAAnB,CAApB;AACA,MAAIW,eAAJ;;AAGA,UAAQF,cAAcG,OAAtB;;AAEC,QAAK,MAAL;AACCD,aAAU,IAAIf,WAAJ,EAAV;AACA;;AAED,QAAK,QAAL;AACCe,aAAU,IAAIE,cAAJ,EAAV;AACA;;AAED,QAAK,OAAL;AACCF,aAAU,IAAIG,aAAJ,EAAV;AACA;;AAZF;;AAgBA,OAAKC,UAAL,CAAgBJ,MAAhB,EAAwBR,YAAxB,EAAsCG,eAAtC;;AAEA;AACA,MAAI,KAAKU,aAAL,CAAmBL,MAAnB,EAA2BL,eAA3B,EAA4CD,YAA5C,CAAJ,EAA+D;AAC9D,UAAO,KAAP;AACA;;AAED;AACA,OAAKY,UAAL,CAAgBjB,WAAhB;;AAEA;AACA,OAAKkB,iBAAL,CAAuBP,MAAvB,EAA+BL,eAA/B;;AAEA,SAAO,EAACA,iBAAiBA,eAAlB,EAAmCa,aAAaR,MAAhD,EAAP;AACA,EAvDuB;;;AAyDxB;AACA;;;;;;;;AAQAI,WAlEwB,sBAkEbJ,MAlEa,EAkELR,YAlEK,EAkESG,eAlET,EAkEyB;;AAEhD;AACA,MAAIc,YAAY,KAAhB;AACAT,SAAOS,SAAP,IAAoB,KAAKC,KAAL,CAAWf,eAAX,EAA4Bc,SAA5B,CAApB;;AAEA;AACA;AACA,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAInB,aAAaoB,MAAjC,EAAyCD,GAAzC,EAA8C;;AAE7C;AACA,OAAInB,aAAamB,CAAb,EAAgBE,YAAhB,CAA6B,QAA7B,KAA0C,KAA9C,EAAqD;AACpD;AACAb,WAAOR,aAAamB,CAAb,EAAgBG,YAAhB,CAA6B,IAA7B,CAAP,IAA6CtB,aAAamB,CAAb,EAAgBI,KAA7D;AACA;AACD;AACD,SAAOf,MAAP;AACA,EAnFuB;;AAoFxB;AACA;;;;;;;AAOAM,WA5FwB,sBA4Fbf,IA5Fa,EA4FR;;AAEf,OAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIpB,KAAKE,QAAL,CAAcmB,MAAlC,EAA0CD,GAA1C,EAA+C;;AAE9C;AACA,OAAI,EAAEpB,KAAKE,QAAL,CAAckB,CAAd,EAAiBK,IAAjB,IAAyB,QAAzB,IAAqCzB,KAAKE,QAAL,CAAckB,CAAd,EAAiBM,SAAjB,IAA8B,QAArE,CAAJ,EAAqF;AACpF1B,SAAKE,QAAL,CAAckB,CAAd,EAAiBI,KAAjB,GAAyB,EAAzB;AACAxB,SAAKE,QAAL,CAAckB,CAAd,EAAiBO,SAAjB,GAA6B,kBAA7B;AACA;AACD;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,EA3HuB;;AA4HxB;AACA;;;;;AAKAnB,cAlIwB,yBAkIVR,IAlIU,EAkIL;AAClB,OAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIpB,KAAKE,QAAL,CAAcmB,MAAlC,EAA0CD,GAA1C,EAA+C;AAC9C,OAAIpB,KAAKE,QAAL,CAAckB,CAAd,EAAiBQ,EAAjB,IAAuB,SAA3B,EAAsC;AACrC,WAAO,EAAClB,SAAQV,KAAKE,QAAL,CAAckB,CAAd,EAAiBI,KAA1B,EAAkCpB,iBAAgB,KAAKC,kBAAL,CAAwBL,IAAxB,CAAlD,CAAoF;AAApF,KAAP;AACA;AACD;AACD,QAAM,+PAAN;AACA,EAzIuB;;;AA2IxB;;;;;;AAMAc,cAjJwB,yBAiJVL,MAjJU,EAiJFL,eAjJE,EAiJoC;AAAA,MAArBD,YAAqB,uEAAN,KAAM;;AAC3D,MAAI0B,oBAAoBC,yBAAYC,YAAZ,CAAyB3B,eAAzB,CAAxB;;AAEA,MAAIyB,qBAAqB,KAAzB,EAAgC;AAC/B,UAAO,KAAP;AACA;AACD;AACA,MAAIG,OAAOH,kBAAkBI,IAAlB,CAAuB;AAAA,UAAOC,KAAK/B,YAAL,KAAsBM,OAAON,YAAP,CAA7B;AAAA,GAAvB,CAAX;AACA,MAAI6B,IAAJ,EAAU;AACTG,SAAO,uBAAP;AACA;AACD,SAAOH,IAAP;AACA,EA7JuB;;AA8JxB;AACA;;;;;;AAMA1B,SArKwB,oBAqKf8B,eArKe,EAqKE;;AAEzB,MAAIC,mBAAmB,CAAvB;;AAEA,OAAK,IAAIjB,IAAI,CAAb,EAAgBA,IAAIgB,gBAAgBf,MAApC,EAA4CD,GAA5C,EAAiD;;AAEhD;AACA,OAAIgB,gBAAgBhB,CAAhB,EAAmBM,SAAnB,IAAgC,QAApC,EAA8C;AAC7C;AACA;AACD;AACA,OAAGU,gBAAgBhB,CAAhB,EAAmBI,KAAnB,CAAyBH,MAAzB,IAAmC,CAAtC,EAAwC;;AAEvCe,oBAAgBhB,CAAhB,EAAmBO,SAAnB,GAA+B,oBAA/B;AACAU;AACA,IAJD,MAIK;;AAEJD,oBAAgBhB,CAAhB,EAAmBO,SAAnB,GAA+B,kBAA/B;AACA;AACD;;AAED;AACA,MAAIU,mBAAmB,CAAvB,EAA0B;AACzB,UAAO,KAAP;AACA,GAFD,MAEK;AACJ,UAAO,IAAP;AACA;AACD,EAhMuB;;;AAkMxB;AACA;;;;;;AAMArB,kBAzMwB,6BAyMNP,MAzMM,EAyMEmB,EAzMF,EAyMM;;AAE7B,MAAIU,iBAAJ;AACA,MAAIC,WAAWC,aAAaC,OAAb,CAAqBb,EAArB,CAAf;AACA,MAAIc,aAAa,EAAjB;;AAEA;AACA,MAAIH,QAAJ,EAAc;;AAEbD,cAAWK,KAAKC,KAAL,CAAWL,QAAX,CAAX;AACAD,YAASO,IAAT,CAAcpC,MAAd;AACA8B,cAAWI,KAAKG,SAAL,CAAeR,QAAf,CAAX;AACAE,gBAAaO,OAAb,CAAqBnB,EAArB,EAAwBW,QAAxB;AACA;AAEA,GARD,MAQK;AACJG,cAAWG,IAAX,CAAgBpC,MAAhB;AACAuC,UAAOR,YAAP,CAAoBO,OAApB,CAA4BnB,EAA5B,EAAgCe,KAAKG,SAAL,CAAeJ,UAAf,CAAhC;AACA;AACA;AACD,EA7NuB;;AA8NxB;;;;;;AAMAvB,MApOwB,iBAoOlBf,eApOkB,EAoOD6C,KApOC,EAoOM;;AAE7B,MAAIC,YAAYpB,yBAAYC,YAAZ,CAAyB3B,eAAzB,CAAhB;AACA,MAAIc,YAAY,CAAhB;AACA,MAAIgC,SAAJ,EAAe;AACd;AACAA,aAAUC,OAAV,CAAkB,mBAAW;;AAE5B,QAAIC,SAASC,QAAQJ,KAAR,CAAT,IAA4B/B,SAAhC,EAA0C;AACzCA,iBAAakC,SAASC,QAAQJ,KAAR,CAAT,CAAb;AACA;AACD,IALD;AAMA,UAAO/B,YAAY,CAAnB;AACA,GATD,MASK;AACJ,UAAO,CAAP;AACA;AAED,EArPuB;;;AAuPxB;;;;;AAKAb,mBA5PwB,gCA4PoB;AAAA,MAAzBL,IAAyB,uEAAlBsD,SAASC,KAAT,CAAe,CAAf,CAAkB;;;AAE3C;AACA,OAAK,IAAInC,IAAI,CAAb,EAAgBA,IAAIpB,KAAKE,QAAL,CAAcmB,MAAlC,EAA0CD,GAA1C,EAA+C;AAC9C,OAAIpB,KAAKE,QAAL,CAAckB,CAAd,EAAiBQ,EAAjB,IAAuB,SAA3B,EAAsC;;AAErC;AACA,WAAO5B,KAAKE,QAAL,CAAckB,CAAd,EAAiBI,KAAjB,GAAyB,UAAhC;AACA;AACD;;AAED,QAAM,4GAAN;AACA;;AAEF;;AA1QyB,CAAlB;;AA6QP;AACC;AACA;AAvRD,qD;;;;;;;;;;;;;;;;;;;;ACAA;;;;IAIaZ,K,WAAAA,K;;;;;;;;;;;;;;;;ACJb;;AACA;;AACA;;AAEAoC,OAAOQ,gBAAP,CAAwB,MAAxB,EAAgC,YAAK;AACpCC,SAAQC,GAAR,CAAYJ,SAASC,KAAT,CAAe,CAAf,CAAZ;AACAE,SAAQC,GAAR,CAAYJ,SAASC,KAAT,CAAe,CAAf,EAAkBrD,QAA9B;AACA,KAAIyD,eAAe,oBAAE,cAAF,CAAnB;AACA,KAAIvD,kBAAkBT,yBAAYU,kBAAZ,EAAtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAyB,0BAAY8B,SAAZ,CAAsBD,YAAtB,EAAmCvD,eAAnC;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,qBAAE,UAAF,EAAcoD,gBAAd,CAA+B,OAA/B,EAAwC,UAASK,CAAT,EAAY;;AAEnD;AACA,MAAIC,iBAAkBnE,yBAAYC,cAAZ,CAA2BiE,CAA3B,CAAtB;;AAEA;AACA,MAAIC,kBAAkB,KAAtB,EAA6B;AAC5B,UAAO,KAAP;AACA;;AAED;AACAhC,2BAAYiC,MAAZ,CAAmBJ,YAAnB,EAAiCG,eAAe7C,WAAhD;AACA,EAZD;;AAcA;AACA;AACA,MAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIuC,aAAaK,IAAb,CAAkB3C,MAAtC,EAA8CD,GAA9C,EAAmD;AAClDuC,eAAaK,IAAb,CAAkB5C,CAAlB,EAAqBoC,gBAArB,CAAsC,OAAtC,EAA+C,UAAUK,CAAV,EAAa;;AAE3D,OAAI,KAAKI,QAAL,IAAiB,CAArB,EAAwB;;AAEtBnC,6BAAYoC,UAAZ,CAAuBP,YAAvB;AACD7B,6BAAY8B,SAAZ,CAAsBD,YAAtB,EAAmCvD,eAAnC,EAAoDyD,EAAE9D,MAAF,CAASoE,OAAT,CAAiBC,aAArE;AACA;AACDX,WAAQY,GAAR,mFAAgC,KAAKJ,QAArC;AACA,GARD;AASA;AAED,CAxDD,E;;;;;;;;;;;;;;;;;ACJA;;AAEA,SAASK,CAAT,CAAWC,QAAX,EAAqB;AACpB,QAAOjB,SAASkB,aAAT,CAAuBD,QAAvB,CAAP;AACA;AACD,SAASE,GAAT,CAAaC,OAAb,EAAsB;AACrB,QAAOpB,SAASqB,oBAAT,CAA8BD,OAA9B,CAAP;AACA;;QAEOJ,C,GAAAA,C;QAAGG,G,GAAAA,G;;;;;;;;;;;;;;;;;;;;ACRX;AACA;;AAEA;;AAEO,IAAI3C,oCAAc;;AAExB;AACA;;;;;;;;AAQA8B,UAXwB,qBAWdgB,KAXc,EAWPC,mBAXO,EAWcC,QAXd,EAWwB;;AAE/C;AACA,MAAI,OAAOD,mBAAP,IAA8B,QAAlC,EAA4C;;AAE3C,OAAIE,eAAc,KAAKhD,YAAL,CAAkB8C,mBAAlB,EAAuCC,QAAvC,CAAlB;;AAEA;AACA,OAAIC,gBAAe,KAAnB,EAA0B;AACzB,WAAO,KAAP;AACA;;AAED,QAAK,IAAI3D,IAAI,CAAb,EAAgBA,IAAI2D,aAAY1D,MAAhC,EAAwCD,GAAxC,EAA6C;;AAE5C,SAAK4D,YAAL,CACCJ,KADD,EAEC,KAAKb,MAAL,CAAYa,KAAZ,EAAmBX,QAFpB,EAGCc,aAAY3D,CAAZ,CAHD;AAKA;AACD;;AAED;AACC,GApBD,MAoBM,IAAG,QAAOyD,mBAAP,yCAAOA,mBAAP,MAA8B,QAAjC,EAA0C;;AAE/C,QAAK,IAAIzD,KAAI,CAAb,EAAgBA,KAAIyD,oBAAoBxD,MAAxC,EAAgDD,IAAhD,EAAqD;AACpD,SAAK4D,YAAL,CACCJ,KADD,EAEC,KAAKb,MAAL,CAAYa,KAAZ,EAAmBX,QAFpB,EAGCc,YAAY3D,EAAZ,CAHD;AAKA;AACD;AACA;AAED,EA9CuB;;;AAgDxB;AACA;;;;;AAKAW,aAtDwB,wBAsDXkD,GAtDW,EAsDNH,QAtDM,EAsDG;;AAE1B,MAAI9C,aAAJ;;AAEA;AACA,WAASkD,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACtB,OAAID,EAAEL,QAAF,IAAcM,EAAEN,QAAF,CAAlB,EAA+B,OAAO,CAAP,CADT,CACmB;AACzC,OAAIK,EAAEL,QAAF,KAAeM,EAAEN,QAAF,CAAnB,EAAgC,OAAO,CAAP,CAFV,CAEoB;AAC1C,OAAIK,EAAEL,QAAF,IAAcM,EAAEN,QAAF,CAAlB,EAA+B,OAAO,CAAC,CAAR,CAHT,CAGoB;AACxC;;AAGH;AACA,MAAItC,aAAaC,OAAb,CAAqBwC,GAArB,CAAJ,EAA+B;;AAE9B,OAAII,aAAarC,OAAOR,YAAP,CAAoBC,OAApB,CAA4BwC,GAA5B,CAAjB;;AAEAI,gBAAc1C,KAAKC,KAAL,CAAWyC,UAAX,CAAd;;AAEArD,UAAOqD,WAAWpD,IAAX,CAAgB,UAACoB,OAAD;AAAA,WAAWA,QAAQiC,cAAR,CAAuBR,QAAvB,CAAX;AAAA,IAAhB,CAAP;;AAEA,OAAI9C,IAAJ,EAAU;AACTqD,eAAWE,IAAX,CAAgBL,OAAhB;AACA,WAAOG,UAAP;AACA,IAHD,MAGM,IAAGP,YAAYU,SAAf,EAAyB;AAC9B,WAAOH,UAAP;AAEA,IAHK,MAGD;AACJ,UAAM,6EAAN;AACA;AAID,GApBD,MAoBM;AACL,UAAO,KAAP;AACA;AAED,EA3FuB;;;AA6FxB;AACA;;;;;;;;;;AAUAtB,OAxGwB,kBAwGjBa,KAxGiB,EAwGVa,IAxGU,EAwG6B;AAAA,MAAjCC,YAAiC,uEAAlB,CAAkB;AAAA,MAAfC,aAAe;;AACpD,MAAIC,cAAc,EAAlB;;AAEA;AACA,WAASC,GAAT,CAAaC,OAAb,EAAsB;AACrB;AACA,QAAK,IAAI1E,IAAI,CAAb,EAAgBA,IAAIsE,YAApB,EAAkCtE,GAAlC,EAAuC;;AAEtC,QAAI2E,MAAMzC,SAAS0C,aAAT,CAAuB,IAAvB,CAAV;AACApB,UAAMqB,WAAN,CAAkBF,GAAlB;;AAEA;AACA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIP,aAApB,EAAmCO,GAAnC,EAAwC;;AAEvC,SAAIC,OAAO7C,SAAS0C,aAAT,CAAuB,IAAvB,CAAX;AACAD,SAAIE,WAAJ,CAAgBE,IAAhB;;AAEA;AACA;AACA;AACDP,gBAAY/C,IAAZ,CAAiBkD,GAAjB;;AAEA,QAAIN,IAAJ,EAAU;;AAETK,aAAQd,YAAR,CAAqBJ,KAArB,EAA4BmB,IAAI9B,QAAhC,EAA0CwB,IAA1C;AACA;AACD;AACD,UAAOG,WAAP;AACA;;AAED;AACA,MAAID,iBAAiBH,SAArB,EAAgC;AAC/BG,mBAAgBf,MAAMZ,IAAN,CAAW,CAAX,EAAcoC,KAAd,CAAoB/E,MAApC;AACA;;AAED;AACA,MAAIqE,gBAAgB,CAApB,EAAuB;;AAEtB,OAAIK,MAAMF,IAAI,IAAJ,CAAV;AACA,UAAOE,IAAI,CAAJ,CAAP;AACA;AACD,SAAOF,IAAI,IAAJ,CAAP;AACA,EAlJuB;;;AAoJxB;AACA;;;;;;;AAOAb,aA5JwB,wBA4JXJ,KA5JW,EA4JJyB,UA5JI,EA4JQ5F,MA5JR,EA4JgB;;AAEvC,OAAK,IAAI6F,IAAI,CAAb,EAAgBA,IAAI1B,MAAMZ,IAAN,CAAWqC,UAAX,EAAuBD,KAAvB,CAA6B/E,MAAjD,EAAyDiF,GAAzD,EAA8D;;AAE7D,QAAKC,aAAL,CAAmB3B,KAAnB,EAA0BnE,MAA1B,EAAkC4F,UAAlC,EAA8CC,CAA9C;AACA;AACD,EAlKuB;;;AAoKxB;AACA;;;;;;;;AAQAC,cA7KwB,yBA6KV3B,KA7KU,EA6KHnE,MA7KG,EA6KK4F,UA7KL,EA6KiBG,WA7KjB,EA6K+B;;AAEtD,OAAK,IAAMvB,GAAX,IAAkBxE,MAAlB,EAA0B;AACzB,OAAIA,OAAO6E,cAAP,CAAsBL,GAAtB,CAAJ,EAAgC;;AAE/B;AACA,QAAIA,IAAIwB,WAAJ,OAAsB,KAAKC,aAAL,CAAmB9B,KAAnB,EAA0B4B,WAA1B,EAAuCC,WAAvC,EAA1B,EAA+E;;AAE9E7B,WAAMZ,IAAN,CAAWqC,UAAX,EAAuBD,KAAvB,CAA6BI,WAA7B,EAA0CG,SAA1C,GAAsDlG,OAAOwE,GAAP,CAAtD;AACA;AACD;AACD;AACD,EAzLuB;;AA0LxB;AACA;;;;;;;AAOAyB,cAlMwB,yBAkMV9B,KAlMU,EAkMH4B,WAlMG,EAkMU;;AAEjC;AACA,MAAII,kBAAkBhC,MAAMZ,IAAN,CAAW,CAAX,EAAcoC,KAAd,CAAoBI,WAApB,EAAiCrC,OAAjC,CAAyCC,aAA/D;AACA,SAAOwC,eAAP;AACA,EAvMuB;AAwMxB1C,WAxMwB,sBAwMbU,KAxMa,EAwMP;AAChB,SAAOA,MAAMZ,IAAN,CAAW3C,MAAX,GAAoB,CAA3B,EAA8B;AAC7BuD,SAAMiC,SAAN,CAAgBjC,MAAMZ,IAAN,CAAW3C,MAAX,GAAkB,CAAlC;AACA;AACD;AA5MuB,CAAlB,C","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","\r\n\r\n// Массив, в котором будут храниться все объекты книг. Этот массив будет помещатся в Local Storage как объект JSON.\r\nlet bookLibrary = [];\r\n\r\n\r\n/**\r\n * Класс для создания объектов \"Книги\". Каждая книга — объект, свойства которого пользователь заполняет в полях \"input\" в форме \"Добавить книгу\"\r\n * @todo реализовать заполнение объекта с помощью конструктора. (В данный момент объект заполняется formHandler.addBookHandler())\r\n */\r\nclass Book{\r\n\r\n\r\n\t// Конструктор не применялся. Новый объект \"book\" заполняется с помощью цикла\r\n/* \tconstructor(id, name, author){\r\n\t\tthis.id = id;\r\n\t\tthis.name = name;\r\n\t\tthis.author = author;\r\n\r\n\t} */\r\n\r\n\t// constructor(array){\r\n\r\n\t// \tfor (let i = 0; i < array.length; i++) {\r\n\t\t\t\r\n\t// \t}\r\n\t// \t// array.forEach(element => {\r\n\t// \t// \telement.id = id;\r\n\t// \t// \telement.name = name;\r\n\t// \t// \telement.author = author;\r\n\t// \t// });\r\n\t// }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport {Book, bookLibrary};","// Эта библиотека отвечает за обработку данных с форм\r\nimport {$} from './myHelperLib';\r\nimport { Book, bookLibrary } from './books.class';\r\nimport { Genre } from './genres.class';\r\nimport { Author } from './genres.class';\r\nimport {tableWorker} from './tableWorker';\r\n\r\n\r\nexport let formHandler = {\r\n\r\n\t\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Обработчик событий при нажатии на кнопку \"addBook\". Берет с формы данные и записывает в LocalStorage.\r\n\t * @param {object} event Объект события\r\n\t * @return {object}  Возвращает объект с ключом от данных в LocalStorage и добавленным объектом.{localStorageKey: localStorageKey, addedObject: book}. Возвращает \"false\", если форма не валидная либо есть такая-же запись в LocalStorage.\r\n\t */\r\n\taddBookHandler(event) {\r\n\r\n\t\tlet currentForm = event.target.form;\r\n\t\tlet formElements = currentForm.elements;\r\n\t\tlet dublicateKey = \"idd\" // Ключ, по которому будет происходить поиск дубликатов (по умолчанию = 'idd')\r\n\t\tlet localStorageKey = this.getLocalStorageKey(currentForm); // Ключ, по которому записываются значения в LocalStorage\r\n\r\n\t\t// Проверка валидации. Если валидация вернула \"false\" — то закончить выполнение текущего метода\r\n\t\tif (this.validate(formElements) == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet currentObject = this.getObjectType(currentForm); \r\n\t\tlet object;\r\n\r\n\r\n\t\tswitch (currentObject.objtype) {\r\n\r\n\t\t\tcase \"book\":\r\n\t\t\t\tobject =  new Book;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"author\":\r\n\t\t\t\tobject =  new Author;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"genre\":\r\n\t\t\t\tobject =  new Genre;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tthis.fillObject(object, formElements, localStorageKey);\r\n\r\n\t\t//Если находим дубликат объекта - метод заканчивает работу.\r\n\t\tif (this.findDublicate(object, localStorageKey, dublicateKey)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t//Чистим все поля для заполнения\r\n\t\tthis.cleanInput(currentForm);\r\n\t\t\r\n\t\t// Добавляем настроенный объект в \"localStorage\"\r\n\t\tthis.addToLocalStorage(object, localStorageKey);\r\n\r\n\t\treturn {localStorageKey: localStorageKey, addedObject: object};\r\n\t},\r\n\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод для заполнения объекта значениями с полей ввода в форме (input)\r\n\t * @todo реализовать заполнение объекта через конструктор класса Book в book.js\r\n\t * @param {object} object Пустой объект, который необходимо заполнить\r\n\t * @param {formElements[]} formElements Массив элементов, с которых берется значения\r\n\t * @param {string} localStorageKey Ключ от локального хранилища (для нахождения ID)\r\n\t * @return {object} Возвращает заполненный объект\r\n\t */\r\n\tfillObject(object, formElements, localStorageKey){\r\n\r\n\t\t// Добавляем новый \"id\"\r\n\t\tlet currentId = \"idd\"\r\n\t\tobject[currentId] = this.getID(localStorageKey, currentId);\r\n\r\n\t\t// Перебор значений массива formElements чтобы взять с каждого элемента значение \"value\"\r\n\t\t// TODO Переделать этот перебор через forEach(или подобную), если это возможно.\r\n\t\tfor (let i = 0; i < formElements.length; i++) {\r\n\r\n\t\t\t// Если элемент формы не имеет атрибута 'ignore'-- заполняем объект, если атрибут имеется -- игнорируем заполнения объекта\r\n\t\t\tif (formElements[i].hasAttribute('ignore') == false) {\r\n\t\t\t\t// Создаем свойство у объекта с таким же именем, как и значение \"id\" в input\r\n\t\t\t\tobject[formElements[i].getAttribute(\"id\")] = formElements[i].value;\r\n\t\t\t} \r\n\t\t}\r\n\t\treturn object;\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод очищает поля в указанной форме.\r\n\t * @todo Передлелать этот метод через цикл \"forEach\" или \"for in \"\r\n\t * @param {object} form форма, поля в которой необходимо очистить\r\n\t * @return Ничего не возвращает\r\n\t */\r\n\r\n\tcleanInput(form){\r\n\r\n\t\tfor (let i = 0; i < form.elements.length; i++) {\r\n\r\n\t\t\t// Если поле скрытое, или элемент формы — кнопка, то пропускаем и не очищаем эти элементы\r\n\t\t\tif (!(form.elements[i].type == \"hidden\" || form.elements[i].localName == \"button\" )) {\r\n\t\t\t\tform.elements[i].value = \"\";\r\n\t\t\t\tform.elements[i].className = \"bookInputs-clean\" ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Вариант1\r\n\t\t// for (const key in form.elements) {\r\n\t\t// \tif (form.elements.hasOwnProperty(key)) {\r\n\t\t// \t\tif (key.type != \"hidden\" || key.localName != \"button\") {\r\n\t\t// \t\t\tkey.value = \"\";\r\n\t\t// \t\t\tkey.className = \"bookInputs-clean\" \r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Вариант2\r\n\t\t// form.elements.forEach(element => {\r\n\t\t// \tif (element.type != \"hidden\" || element.localName != \"button\") {\r\n\t\t// \t\telement.value = \"\";\r\n\t\t// \t\telement.className = \"bookInputs-clean\" \r\n\t\t// \t}\r\n\t\t// });\r\n\r\n\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод устанавливает, какой объект должен заполнятся в форме. Для работы метода в форме должно быть поле <input type='hidden' id='objtype' value=''>, иначе метод выбросит исключение.\r\n\t * @param {object} form форма, которая предназначена для ввода данных об объекте.\r\n\t * @return {object} Возвращает объект, c 2-мя свойствами: названием объекта и ключ для localStorage.\r\n\t */\r\n\tgetObjectType(form){\r\n\t\tfor (let i = 0; i < form.elements.length; i++) {\r\n\t\t\tif (form.elements[i].id == \"objtype\") {\r\n\t\t\t\treturn {objtype:form.elements[i].value , localStorageKey:this.getLocalStorageKey(form) }   //form.elements[i].value\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow \"Не найдено поле ввода  <input type='hidden'> с указанием типа объекта, который будет передан в базу данный. Добавьте в вашу форму поле <input type='hidden' id='objtype' value=''>  В поле value='' укажите тип объекта, который будет добавлен в базу данных\"\r\n\t},\r\n\r\n\t/**\r\n\t * Метод проверяет дубликаты объектов. В случае нахождения дубликата выводит ошибку.\r\n\t * @param {object} object \r\n\t * @param {string} localStorageKey \r\n\t * @return {boolean} true, если метод нашел повторную запись, false — если не нашел.\r\n\t */\r\n\tfindDublicate(object, localStorageKey, dublicateKey = \"idd\"){\r\n\t\tlet localStorageArray = tableWorker.getTableData(localStorageKey);\r\n\r\n\t\tif (localStorageArray == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Тут производится сравнение по полю \"dublicateKey\". Если есть совпадение — считается, что найден дубликат и метод выводит сообщение.\r\n\t\tlet flag = localStorageArray.some(item =>item[dublicateKey] == object[dublicateKey]);\r\n\t\tif (flag) {\r\n\t\t\talert (\"такая запись уже есть\");\r\n\t\t}\r\n\t\treturn flag;\r\n\t},\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод проверяет чтобы все необходимые поля были заполнены (минимум 1 символом). \r\n\t * \r\n\t * @param {arrayOfElements[]} arrayOfElements Массив с DOM-элементами,  полями ввода (input) формы \r\n\t * @return {boolean} \"true\", если все поля валидные. \"false\", если хотя-бы 1 поле не прошло проверку (тогда и форма считается не валидной)\r\n\t */\r\n\tvalidate(arrayOfElements) {\r\n\t\t\r\n\t\tlet counterOfInvalid = 0;\r\n\r\n\t\tfor (let i = 0; i < arrayOfElements.length; i++) {\r\n\r\n\t\t\t//Этим \"if\" обрабатывается исключение (те элементы формы, которые не нужно валидировать)\r\n\t\t\tif (arrayOfElements[i].localName == \"button\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Сама проверка. Если в инпут не ввели данные— тогда применяется стиль (invalid) и обработчик завершает работу.\r\n\t\t\tif(arrayOfElements[i].value.length == 0){\r\n\r\n\t\t\t\tarrayOfElements[i].className = \"bookInputs-invalid\";\r\n\t\t\t\tcounterOfInvalid++;\r\n\t\t\t}else{\r\n\t\t\t\t\r\n\t\t\t\tarrayOfElements[i].className = \"bookInputs-valid\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Если счетчик невалидных элементов больше нуля — то и сама форма невалидная (вернуть \"false\")\r\n\t\tif (counterOfInvalid > 0) {\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t},\r\n\r\n\t// --------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод  добавляет переданный ей объект в локальное хранилище (Local Storage).\r\n\t * @param {object} object Объект, который нужно записать в LocalStorage\r\n\t * @param {string} id Ключ, по которому будет записываться объект\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\taddToLocalStorage(object, id) {\r\n\r\n\t\tlet tempData;\r\n\t\tlet tempJSON = localStorage.getItem(id);\r\n\t\tlet firstArray = [];\r\n\r\n\t\t// Если у нас уже есть такой JSON-объект — функция добавляет наш объект (который мы передали в параметре) — в готовый массив объектов. Если еще нет JSON-объекта — создаем новый.\r\n\t\tif (tempJSON) {\r\n\t\t\t\r\n\t\t\ttempData = JSON.parse(tempJSON);\r\n\t\t\ttempData.push(object);\r\n\t\t\ttempJSON = JSON.stringify(tempData);\r\n\t\t\tlocalStorage.setItem(id,tempJSON);\r\n\t\t\treturn;\r\n\r\n\t\t}else{\r\n\t\t\tfirstArray.push(object);\r\n\t\t\twindow.localStorage.setItem(id, JSON.stringify(firstArray));\r\n\t\t\treturn;\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t *  Метод формирует уникальный  id  для нового объекта.\r\n\t * @param {string} localStorageKey ключ от локального хранилища.\r\n\t * @param {string} field поле у объекта, по которому считается уникальное значение. (Сейчас подразумевается, что поле типа {number})\r\n\t * @return {number} Возращает новое значение \"id\", которого еще не было (самое большое текущее \"id\" +1)\r\n\t */\r\n\tgetID(localStorageKey, field) {\r\n\r\n\t\tlet tableData = tableWorker.getTableData(localStorageKey);\r\n\t\tlet currentId = 0;\r\n\t\tif (tableData) {\r\n\t\t\t// ищем самое большое значение \"id\"\r\n\t\t\ttableData.forEach(element => {\r\n\t\t\t\t\r\n\t\t\t\tif( parseInt(element[field])  > currentId){\r\n\t\t\t\t\tcurrentId  = parseInt(element[field])\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn currentId + 1;\r\n\t\t}else{\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t/**\r\n\t * Метод формирует ключ для LocalStorage.\r\n\t * @param {object} form Форма, в которую вводятся данные об объекте (1 форма - 1 объект). По умолчанию \"document.forms[0]\"\r\n\t * @return {string} Возвращает созданный ключ для LocalStorage.\r\n\t */\r\n\tgetLocalStorageKey(form = document.forms[0]){\r\n\r\n\t\t//Находим в форме поле ввода с id == \"objtype\" (это поле типа  \"hidden\")\r\n\t\tfor (let i = 0; i < form.elements.length; i++) {\r\n\t\t\tif (form.elements[i].id == \"objtype\") {\r\n\t\t\t\t\r\n\t\t\t\t// Возвращаем созданный  ключ\r\n\t\t\t\treturn form.elements[i].value + \"-library\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow \"Метод не смог найти поле с id == 'objtype' и value == '<название вашего объекта>'. Убедитесь что оно есть \"\r\n\t}\r\n\r\n// --------------------------------------------------------------------------\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n\t// // TODO — Реализовать уникальный ID\r\n\t// // // Функция формирует специфический ID для записи в \"Local Storage\". Используется функцией \"addToLocalStorage\"\r\n\r\n\t\r\n","/**\r\n * Класс для создания объектов \"Книги\". Каждая книга — объект, свойства которого пользователь заполняет в полях \"input\" в форме \"Добавить книгу\"\r\n * @todo реализовать заполнение объекта с помощью конструктора. (В данный момент объект заполняется formHandler.addBookHandler())\r\n */\r\nexport class Genre{\r\n}\r\n","import { tableWorker } from './tableWorker';\r\nimport {$, tag} from './myHelperLib'\r\nimport { formHandler } from './formHandler';\r\n\r\nwindow.addEventListener(\"load\", () =>{\r\n\tconsole.dir(document.forms[0])\r\n\tconsole.dir(document.forms[0].elements)\r\n\tlet currentTable = $('#table-books');\r\n\tlet localStorageKey = formHandler.getLocalStorageKey();\r\n\r\n\t// // Находим localStorageKey (Ключ для базы данных в LocalStorage)\r\n\t// for (let i = 0; i < document.forms[0].elements.length; i++) {\r\n\t// \tif (document.forms[0].elements[i].dataset.hasOwnProperty(\"localStorageKey\")) {\r\n\t// \t\tlocalStorageKey = document.forms[0].elements[i].dataset.localStorageKey;\r\n\t// \t}\r\n\t// }\r\n\r\n\ttableWorker.fillTable(currentTable,localStorageKey);\r\n\r\n\r\n\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\t// ♦ Задержка строки (через флаг, после нажатия на строку,  строка будет подсвечиваться (эта строка сейчас активна)). На основе этого будет удаление и изменение текущего объекта.\r\n\t// ♦ Подвязать жанры, значениее которых будет передаваться в поля ввода\r\n\t// ♦ реализовать перебор объектов с помощью кнопок (данные выводятся в форму). \r\n\t// ♦ Добавить возможность изменить объект (перезаписать) (кнопка \"Изменить\")\r\n\t// ♦ Добавить возможность удалить объект  () (кнопка \"Удалить\")\r\n\t// ♦ Реализовать поиск . Пока по 1 полю. Фун-я fillTable перезаполняет таблицу с учетом поиска на каждое событие onKeyPress. Посмотреть как это реализовывалось на практической по ангуляру.\r\n\t// ♦ Продумать, как будет реализовываться валидация полей по заданным регулярным выражениям (можно РВ поместить в атрибуты).  \r\n\r\n\t// TODO ♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦\r\n\r\n\t\r\n\t$('#addBook').addEventListener(\"click\", function(e) {\r\n\t\t\r\n\t\t// Запускаем обработчик события на клик по кнопке \"addBook\" и получаем возращаемый объект, который записался в базу данных.\r\n\t\tlet returnedObject =  formHandler.addBookHandler(e);\r\n\r\n\t\t// Если есть ошибка в валидации — возвращаем \"false\", и клик не дает результата (не записывает данные и не модифицирует таблицу )\r\n\t\tif (returnedObject == false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Добавляем ряд с данными в таблицу\r\n\t\ttableWorker.addRow(currentTable, returnedObject.addedObject);\r\n\t});\r\n\r\n\t// Выбор определенной строки. Тут перебираются все строки и на конкретную строку, которую выбрал пользователь -- вешается обработчик событий. \r\n\t// TODO Реализовать так, чтобы вся логика находилась в файле \"tableWorker.js\"\r\n\tfor (let i = 0; i < currentTable.rows.length; i++) {\r\n\t\tcurrentTable.rows[i].addEventListener('click', function (e) {\r\n\r\n\t\t\tif (this.rowIndex == 0) {\r\n\r\n \t\t\t\ttableWorker.cleanTable(currentTable);\r\n\t\t\t\ttableWorker.fillTable(currentTable,localStorageKey, e.target.dataset.objectKeyBind);\r\n\t\t\t}\r\n\t\t\tconsole.log(`Индекс строки =  ${this.rowIndex}`);\r\n\t\t});\r\n\t}\r\n\r\n});","//  Моя вспомогательная библиотека. Тут находятся функции-помощники, чтобы не подключать JQuery.\r\n\r\nfunction $(selector) {\r\n\treturn document.querySelector(selector);\r\n}\r\nfunction tag(tagName) {\r\n\treturn document.getElementsByTagName(tagName);\r\n}\r\n\r\nexport {$, tag };","\r\n// Тут находятся все функции для работы с таблицами.\r\n// Добавлять строки, редактировать,удалять, заполнять таблицу\r\n\r\n/** @module tableWorker */\r\n\r\nexport let tableWorker = {\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * @todo Необходимо реализовать перегрузку функции, чтобы она принимала либо массив, либо строку-\"ключ\" LocalStorage  (Подробнее — https://habr.com/ru/post/86403/)\r\n\t * @description  Метод заполняет указанную таблицу, взяв данные с LocalStorage по ключу, либо указанным массивом объектов.\r\n\t * @param {Object} table Таблица, кототую необходимо заполнить\r\n\t * @param {Array} keyOrArrayOfObjects Ключ либо массив с данными (с объектами)\r\n\t * @param {string} sortMark поле, по которому будет происходить сортировка объектов\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\tfillTable(table, keyOrArrayOfObjects, sortMark) {\r\n\r\n\t\t// Если в параметре (№2) указан ключ — метод достает значения из LocalStorage и заполняет таблицу.\r\n\t\tif (typeof keyOrArrayOfObjects == \"string\") {\r\n\t\t\t\r\n\t\t\tlet arrayofData = this.getTableData(keyOrArrayOfObjects, sortMark);\r\n\r\n\t\t\t// Проверка на незаполненную таблицу\r\n\t\t\tif (arrayofData == false) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < arrayofData.length; i++) {\r\n\r\n\t\t\t\tthis.addInfoInRow(\r\n\t\t\t\t\ttable, \r\n\t\t\t\t\tthis.addRow(table).rowIndex, \r\n\t\t\t\t\tarrayofData[i]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\t// Если в параметре (№2) указан объект с данными — метод заполняет таблицу этим объектом.\r\n\t\t}else if(typeof keyOrArrayOfObjects == \"object\"){\r\n\r\n\t\t\tfor (let i = 0; i < keyOrArrayOfObjects.length; i++) {\r\n\t\t\t\tthis.addInfoInRow(\r\n\t\t\t\t\ttable, \r\n\t\t\t\t\tthis.addRow(table).rowIndex, \r\n\t\t\t\t\tarrayofData[i]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод позволяет получить данные с LocalStorage для заполнения таблицы.  \r\n\t * @param {String} key ключ от объекта в LocalStorage\r\n\t * @return {Object} Возвращает распарсенный массив объектов, которым можно заполнить таблицу (jsonObject)\r\n\t */\r\n\tgetTableData(key, sortMark){\r\n\r\n\t\tlet flag;\r\n\r\n\t\t// ! Закончил тут. Вернуть этой функцией отсотрированный массив по критерию \"sortMark\" \r\n\t\tfunction compare(a, b) {\r\n\t\t\tif (a[sortMark] > b[sortMark]) return 1; // если первое значение больше второго\r\n\t\t\tif (a[sortMark] == b[sortMark]) return 0; // если равны\r\n\t\t\tif (a[sortMark] < b[sortMark]) return -1; // если первое значение меньше второго\r\n\t\t  }\r\n\r\n\r\n\t\t// Если есть JSON-данные по переданному ключу (аргумент \"key\" в LocalStorage) — тогда возвращаем подготовленные данные, если JSON не найден — возвращаем false.\r\n\t\tif (localStorage.getItem(key)) {\r\n\r\n\t\t\tlet jsonObject = window.localStorage.getItem(key);\r\n\r\n\t\t\tjsonObject =  JSON.parse(jsonObject);\r\n\r\n\t\t\tflag = jsonObject.some((element)=>element.hasOwnProperty(sortMark));\r\n\r\n\t\t\tif (flag) {\r\n\t\t\t\tjsonObject.sort(compare)\r\n\t\t\t\treturn jsonObject;\r\n\t\t\t}else if(sortMark == undefined){\r\n\t\t\t\treturn jsonObject;\r\n\t\t\t\t\r\n\t\t\t}else{\r\n\t\t\t\tthrow \"Ключ, переданный для сортировки — не верный. Такого свойства у объекта нет.\"\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод, который добавляет ряды с ячейками в таблицу\r\n\t * @todo Реализовать эту функцию так, чтобы не получалось замыкание. (Чтобы не использовалась внутреняя функция)\r\n\t * @param {Object} table Таблица, в которую необходимо добавить ряд(ы)\t \r\n\t * @param {Object} data Данные, которые необходимо добавить в ряд(ы)\r\n\t * @param {Number} numberOfRows Кол-во рядов (по умолчанию = 1)\r\n\t * @param {Number} numberOfCells Кол-во ячеек в ряде (По умолчанию высчитывается по кол-ву ячеек в заголовке (thead))\r\n\t * @return {arrayofRows} Возвращает созданный массив строк (либо 1 строку) с данными.\r\n\t */\r\n\r\n\taddRow(table, data, numberOfRows = 1, numberOfCells) {\r\n\t\tlet arrayofRows = [];\r\n\r\n\t\t// Эта функция собственно и добавляет ряд, ячейки и текст в таблицу. Принимает контекст, и возвращает массив с созданными строками\r\n\t\tfunction add(context) {\r\n\t\t\t// Цикл добавляеи по 1-й строке то кол-во, которое мы укажем (numberOfRows)\r\n\t\t\tfor (let i = 0; i < numberOfRows; i++) {\r\n\r\n\t\t\t\tlet row = document.createElement(\"tr\")\r\n\t\t\t\ttable.appendChild(row)\r\n\r\n\t\t\t\t// Цикл добавляет по 1-й ячейке то кол-во, которое мы укажем (numberOfCells)\r\n\t\t\t\tfor (let j = 0; j < numberOfCells; j++) {\r\n\r\n\t\t\t\t\tlet cell = document.createElement(\"td\")\r\n\t\t\t\t\trow.appendChild(cell)\r\n\r\n\t\t\t\t\t// Добавляем текст в ячейку переданным параметром\r\n\t\t\t\t\t// cell.innerHTML = textInCell;\r\n\t\t\t\t}\r\n\t\t\t\tarrayofRows.push(row);\r\n\r\n\t\t\t\tif (data) {\r\n\r\n\t\t\t\t\tcontext.addInfoInRow(table, row.rowIndex, data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn arrayofRows;\r\n\t\t}\r\n\r\n\t\t// Проверка на наличие аргумента \"numberOfCells\", если его нет— за количестко ячеек считается количество ячеек в самом первом ряду (в \"thead\");\r\n\t\tif (numberOfCells == undefined) {\r\n\t\t\tnumberOfCells = table.rows[0].cells.length;\r\n\t\t}\r\n\r\n\t\t// Этот способ будет использоваться чаще всего и возвращать 1 созданный ряд с данными.\r\n\t\tif (numberOfRows == 1) {\r\n\r\n\t\t\tlet row = add(this)\r\n\t\t\treturn row[0];\r\n\t\t}\r\n\t\treturn add(this);\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Это основной метод, который заполняет целый ряд таблицы. Использует метод \"addInfoInCell\", который заполняет каждую ячейку\r\n\t * @param {Object} table Таблица, в которой будет заполнятся ряд\r\n\t * @param {Number} indexOfRow Индекс ряда в таблице, который будет заполнятся данными \r\n\t * @param {Object} object Объект с данными для заполнения ряда. \r\n\t * @return {void} Ничего не возвращает\r\n\t*/\r\n\taddInfoInRow(table, indexOfRow, object) {\r\n\r\n\t\tfor (let k = 0; k < table.rows[indexOfRow].cells.length; k++) {\r\n\r\n\t\t\tthis.addInfoInCell(table, object, indexOfRow, k)\r\n\t\t}\r\n\t},\r\n\r\n\t// ---------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод заполняет одну указанную ячейку в указанном ряде таблицы.Метод переберает объект на подходящее свойство и помещает значение этого свойства в ячейку таблицы. Нужен для работы метода addInfoInRow\r\n\t * @param {Object} table Таблица, в которой будет заполнятся ячейка\r\n\t * @param {Object} object Объект с данными для заполнения ячейки.\r\n\t * @param {Number} indexOfRow Индекс ряда, в котором находится нужная для заполнения ячейка\r\n\t * @param {Number} indexOfCell Индекс ячейки, которая будет заполнятся.\r\n\t * @return {void} Ничего не возвращает\r\n\t */\r\n\taddInfoInCell(table, object, indexOfRow, indexOfCell ) {\r\n\r\n\t\tfor (const key in object) {\r\n\t\t\tif (object.hasOwnProperty(key)) {\r\n\r\n\t\t\t\t// Если ключ объекта равняется тому, что вернул метот \"whatHead\" — значение из объекта заполняется в заранее заданную ячейку\r\n\t\t\t\tif (key.toLowerCase() === this.whatObjectKey(table, indexOfCell).toLowerCase()){\r\n\r\n\t\t\t\t\ttable.rows[indexOfRow].cells[indexOfCell].innerHTML = object[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t// -----------------------------------------------------------------------------\r\n\t/**\r\n\t * Метод вычисляет, какой заголовок находиться над указанной ячейкой (Заголовок колонки). Нужен для работы метода \"addInfoInCell\"\r\n\t * @param {Object} table Таблица, в которой необходимо вычислить заголовок для указанной ячейки\r\n\t * @param {Number} indexOfCell Индекс ячейки\r\n\t * @return {String}  Возвращает название заголовка над ячейкой.\r\n\t * @see addInfoInCell\r\n\t */\r\n\twhatObjectKey(table, indexOfCell) {\r\n\r\n\t\t// Получаем значение из атрибута \"data-object-key-bind\" в заголовочной ячейки\r\n\t\tlet nameOfTableHead = table.rows[0].cells[indexOfCell].dataset.objectKeyBind;\r\n\t\treturn nameOfTableHead;\r\n\t},\r\n\tcleanTable(table){\r\n\t\twhile (table.rows.length > 1) {\r\n\t\t\ttable.deleteRow(table.rows.length-1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n"],"sourceRoot":""}