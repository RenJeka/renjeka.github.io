// Сначала подключаются плагины для указания их в настройках
// ======================== ПЛАГИНЫ ================================
let path = require('path'); // Подключение модуля, который позволяет найти  относительный путь

let ExtractTextPlugin = require("extract-text-webpack-plugin"); // Подключение модуля "ExtractTextPlugin", который ...
// ==================================================================


// Суть конфигурации вебпака в том, что нужно сконфигурировать (создать) объект с настройками Вебпака и экспортировать его (Вебпак сам его заберет)

// ================= КОНФИГУРАЦИОННЫЙ ОБЪЕКТ ========================
// Основной объект настроек вебпака 
let JekaWebpackConfiguration = {

	// Свойство-объект "entry" -- указывает входные точки 
	entry: {
		index: './src/index.js',
		indexGenre: './src/indexGenre.js',
		indexAuthor: './src/indexAuthor.js'
	},

	// Свойство-объект "output" -- указывает входные точки 
	output:{
		path: path.resolve(__dirname, './dist'), // Используем модуль "path" чтобы составить правильный относительный путь
		filename: '[name].js', // Итоговое название (выходящего) файла. Название бандла
		publicPath: 'dist/'
	},

	// Свойство-объек настройки dev-server-а (сервера для разработки)
	devServer:{
		overlay: true // Свойство, которое дает визуальный вывод ошибки прямо в HTML-страницу (белые буквы на черном фоне). Удобный показ ошибки.
	},
	module:{

		// Свойство-объект "rules" -- описание правил. С каким расширением что мы делаем.
		// Для правил (для каждого правила) нужно указывать регулярное выражение
		rules:[

			// В это правеле указывается: Мы берем файл с расширением .js, и прогоняем его через загрузчик "babel-loader"
			{
				test:/\.js$/,				// регулярное выражение (к какому файлу применить правило)
				loader: 'babel-loader',		// Какой загрузчик использовать для данного файла
				exclude: '/node_modules/'	// Исключение из правил (не нужно папку "node_modules" прогонять через 'babel-loader')
			},

			// Правило для файлов, которые заканчиваются на ".css" 
			{
				test:/\.css$/,

				// // Если мы используем несколько загрузчиков ("loader") -- необходимо их добавить массивом в свойство "use". Порядок подключения загрузчиков ВАЖЕН! 
				// use: [
				// 	// Загрузчик, который считывает данные с файла и возвращает их в корректном виде без интерпритации
				// 	'style-loader',
				// 	// Загрузчик, который специальным образом подключает css-файл ( вставляет в .js файл в тег <head>. CSS внутри JS)
				// 	'css-loader'
				// ]

				// Для css- файлов используем плагин "ExtractTextPlugin"
				use: ExtractTextPlugin.extract({
					// fallback: "style-loader",
					use: "css-loader" // Загрузчик, который специальным образом подключает css-файл ( вставляет в .js файл в тег <head>. CSS внутри JS)
				})
			},
			{
				test:/\.(jpg|png|svg|gif)$/,				
				use: [
					{
						loader: 'file-loader',
						options: {
							name: '[path][name].[ext]',
							outputPath: './img',
							useRelativePath: true,
							publicPath:
						}
					}
				]
			},
		]
	},
	// TODO Разобраться с SplitChunksPlugin, и выделить общие  файлы, которые участвуют во всех бандлах, -- в отдельный chunk

	// Задаются отдельные настройки для плагинов. 
	plugins: [
		new ExtractTextPlugin("styles.css"), 
		// new ExtractTextPlugin("styles.css", {allChunks:true}),
	],
	devtool: 'sourcemap' // Настройка, которая позволяет создавать sourcemap в итоговой сборке
}
// ==================================================================

// Экспортируем объект с настройками вебпака
module.exports = JekaWebpackConfiguration;